# This file gives the CNN model to predict landmark in LEVEL-{level}
name: "landmark_{level}_{name}"
layer {{
    name: "data"
    type: "MemoryData"
    top: "data"
    top: "landmark"

    memory_data_param {{
        batch_size: 500
        channels: 1
        height: 81
        width: 81
    }}
    transform_param {{
        scale: 0.00390625
    }}
}}
layer {{
    name: "conv1"
    type: "Convolution"
    bottom: "data"
    top: "conv1"
    param {{
        lr_mult: 1
    }}
    param {{
        lr_mult: 2
    }}
    convolution_param {{
        num_output: 25
        kernel_size: 10
        stride: 1
        weight_filler {{
            type: "gaussian"
            std: 0.1
        }}
        bias_filler {{
            type: "constant"
            value: 0
        }}
    }}
}}
layer {{
    name: "relu1"
    type: "ReLU"
    bottom: "conv1"
    top: "conv1"
}}
layer {{
    name: "pool1"
    type: "Pooling"
    bottom: "conv1"
    top: "pool1"
    pooling_param {{
        pool: MAX
        kernel_size: 2
        stride: 2
    }}
}}
layer {{
    name: "conv2"
    type: "Convolution"
    bottom: "pool1"
    top: "conv2"
    param {{
        lr_mult: 1
    }}
    param {{
        lr_mult: 2
    }}
    convolution_param {{
        num_output: 25
        kernel_size: 7
        stride: 1
        weight_filler {{
            type: "gaussian"
            std: 0.1
        }}
        bias_filler {{
            type: "constant"
            value: 0
        }}
    }}
}}
layer {{
    name: "relu2"
    type: "ReLU"
    bottom: "conv2"
    top: "conv2"
}}
layer {{
    name: "pool2"
    type: "Pooling"
    bottom: "conv2"
    top: "pool2"
    pooling_param {{
        pool: MAX
        kernel_size: 2
        stride: 2
    }}
}}
layer {{
    name: "conv3"
    type: "Convolution"
    bottom: "pool2"
    top: "conv3"
    param {{
        lr_mult: 1
    }}
    param {{
        lr_mult: 2
    }}
    convolution_param {{
        num_output: 25
        kernel_size: 5
        stride: 2
        weight_filler {{
            type: "gaussian"
            std: 0.1
        }}
        bias_filler {{
            type: "constant"
            value: 0
        }}
    }}
}}
layer {{
    name: "relu3"
    type: "ReLU"
    bottom: "conv3"
    top: "conv3"
}}
layer {{
    name: "pool3"
    type: "Pooling"
    bottom: "conv3"
    top: "pool3"
    pooling_param {{
        pool: MAX
        kernel_size: 2
        stride: 2
    }}
}}

layer {{
    name: "conv4"
    type: "Convolution"
    bottom: "pool3"
    top: "conv4"
    param {{
        lr_mult: 1
    }}
    param {{
        lr_mult: 2
    }}
    convolution_param {{
        num_output: 25
        kernel_size: 5
        stride: 2
        weight_filler {{
            type: "gaussian"
            std: 0.1
        }}
        bias_filler {{
            type: "constant"
            value: 0
        }}
    }}
}}
layer {{
    name: "relu4"
    type: "ReLU"
    bottom: "conv4"
    top: "conv4"
}}

layer {{
    name: "fc1"
    type: "InnerProduct"
    bottom: "pool2"
    top: "fc1"
    param {{
        lr_mult: 1
    }}
    param {{
        lr_mult: 2
    }}
    inner_product_param {{
        num_output: 50
        weight_filler {{
            type: "gaussian"
            std: 0.1
        }}
        bias_filler {{
            type: "constant"
            value: 0
        }}
    }}
}}
layer {{
    name: "relu_fc1"
    type: "ReLU"
    bottom: "fc1"
    top: "fc1"
}}
layer {{
    name: "fc2"
    type: "InnerProduct"
    bottom: "fc1"
    top: "fc2"
    param {{
        lr_mult: 1
    }}
    param {{
        lr_mult: 2
    }}
    inner_product_param {{
        num_output: 2
        weight_filler {{
            type: "gaussian"
            std: 0.1
        }}
        bias_filler {{
            type: "constant"
            value: 0
        }}
    }}
}}
layer {{
    name: "relu_fc2"
    type: "ReLU"
    bottom: "fc2"
    top: "fc2"
}}
layer {{
    name: "prob"
    type: "Softmax"
    bottom: "fc2"
    top: "prob"
}}